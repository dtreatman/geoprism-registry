{"version":3,"sources":["webpack:///./src/app/shared/service/profile.service.ts","webpack:///./src/app/shared/service/session.service.ts","webpack:///./src/app/shared/component/loading-bar/loading-bar.component.html","webpack:///./src/app/shared/component/loading-bar/loading-bar.component.ts","webpack:///./src/app/shared/pipe/localize.pipe.ts","webpack:///./src/app/shared/component/message/message.component.ts","webpack:///./src/app/shared/service/modal-step-indicator.service.ts","webpack:///./src/app/shared/component/message/message.component.html","webpack:///./src/app/shared/service/localization.service.ts","webpack:///./src/app/shared/service/guard.service.ts","webpack:///./src/app/shared/service/event.service.ts","webpack:///./src/app/shared/component/modals/error-modal.component.ts","webpack:///./src/app/shared/component/header/header.component.ts","webpack:///./src/app/shared/service/progress.service.ts","webpack:///./src/app/shared/component/form-fields/boolean-field/boolean-field.component.ts","webpack:///./src/app/shared/component/profile/profile.component.ts","webpack:///./src/app/shared/service/pending-changes-guard.ts","webpack:///./src/app/shared/component/header/header.component.html","webpack:///./src/app/shared/component/message/error-message.component.html","webpack:///./src/app/shared/component/message/error-message.component.ts","webpack:///./src/app/shared/component/modals/confirm-modal.component.ts","webpack:///./src/app/shared/model/modal.ts","webpack:///./src/app/shared/component/modals/success-modal.component.ts","webpack:///./src/app/shared/component/modals/modal-step-indicator.component.html","webpack:///./src/app/shared/component/modals/error-modal.component.html","webpack:///./src/app/shared/component/modals/success-modal.component.html","webpack:///./src/app/shared/component/modals/confirm-modal.component.html","webpack:///./src/app/shared/component/modals/modal-step-indicator.component.ts","webpack:///./src/app/shared/component/profile/profile.component.html","webpack:///./src/app/shared/component/form-fields/boolean-field/boolean-field.component.html","webpack:///./src/app/shared/shared.module.ts","webpack:///./src/app/shared/component/localize/localize.component.ts","webpack:///./src/app/shared/component/localize/localize.component.html","webpack:///./src/app/shared/service/auth.service.ts"],"names":["service","http","get","headers","HttpHeaders","this","post","acp","toPromise","apply","profile","JSON","stringify","account","unlock","oid","ProfileService","authService","login","username","password","start","finally","complete","then","user","setUser","logout","response","SessionService","showIndicator","ngOnInit","registerListener","ngOnDestroy","deregisterListener","LoadingBarComponent","transform","value","decode","LocalizePipe","error","message","onError","onMessage","msg","MessageComponent","modalStepChangedSource","Subject","modalStepChange","asObservable","getStepConfig","stepConfig","setStepConfig","config","next","getStep","step","setStep","ModalStepIndicatorService","locales","parser","Globalize","numberParser","formatter","numberFormatter","getLocales","setLocales","create","localizedValue","localeValues","forEach","locale","push","parseNumber","length","formatNumber","number","Number","localize","bundle","key","com","runwaysdk","Localize","index","lastIndexOf","temp","slice","LocalizationService","router","canActivate","route","state","isAdmin","navigate","AdminGuard","isMaintainer","MaintainerGuard","isContributer","ContributerGuard","isLoggedIn","AuthGuard","listeners","listener","indexOfItem","indexOf","splice","EventService","bsModalRef","localizeService","ErrorModalComponent","sessionService","modalService","profileService","context","isContributor","window","location","href","getUsername","show","ProfileComponent","backdrop","class","content","CgrHeaderComponent","progress","ProgressService","localizeLabelKey","label","valueChange","EventEmitter","toggle","emit","BooleanFieldComponent","firstName","lastName","email","changePassword","onSubmit","hide","getRoles","getRoleDisplayLabels","cancel","canDeactivate","component","confirmRet","confirm","afterDeactivate","PendingChangesGuard","ErrorMessageComponent","submitText","cancelText","type","ModalTypes","warning","onConfirm","data","ConfirmModalComponent","StepConfig","Step","SuccessModalComponent","modalStepIndicatorService","stepSubscription","subscribe","unsubscribe","ModalStepIndicatorComponent","forRoot","ngModule","SharedModule","providers","CookieService","AuthService","text","LocalizeComponent","loggedIn","userName","roles","roleDisplayLabels","version","cookie","check","cookieData","cookieDataJSON","parse","removeUser","str","i","getVersion"],"mappings":"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","file":"0.chunk.js","sourcesContent":["///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\n///\n\nimport { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpResponse, HttpParams } from '@angular/common/http';\n\nimport 'rxjs/add/operator/toPromise';\n\nimport { EventService } from './event.service';\n\nimport { Profile } from '../model/profile';\n\ndeclare var acp: any;\n\n@Injectable()\nexport class ProfileService {\n\n    constructor( service: EventService, private http: HttpClient ) { }\n\n    get(): Promise<Profile> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        return this.http\n            .post<Profile>( acp + '/account/get', { headers: headers } )\n            .toPromise();\n    }\n\n\n    apply( profile: Profile ): Promise<Profile> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        return this.http\n            .post<Profile>( acp + '/account/apply', JSON.stringify( { account: profile } ), { headers: headers } )\n            .toPromise();\n    }\n\n    unlock( oid: string ): Promise<void> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        return this.http\n            .post<void>( acp + '/account/unlock', JSON.stringify( { oid: oid } ), { headers: headers } )\n            .toPromise()\n    }\n}\n","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <ehttp://www.gnu.org/licenses/>.\n///\n\nimport { Injectable } from '@angular/core';\nimport { HttpHeaders, HttpClient, HttpResponse, HttpParams } from '@angular/common/http';\n\nimport 'rxjs/add/operator/toPromise';\nimport 'rxjs/add/operator/finally';\n\nimport { EventService } from './event.service';\n\nimport { AuthService } from './auth.service';\nimport { User } from '../model/user';\n\ndeclare var acp: any;\n\n@Injectable()\nexport class SessionService {\n\n    constructor( private service: EventService, private http: HttpClient, private authService: AuthService ) { }\n\n    login( username: string, password: string ): Promise<User> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.service.start();\n\n        return this.http\n            .post<User>( acp + '/session/login', JSON.stringify( { username: username, password: password } ), { headers: headers } )\n            .finally(() => {\n                this.service.complete();\n            } )\n            .toPromise()\n            .then(( user: User ) => {\n                this.authService.setUser( user );\n\n                return user;\n            } )\n    }\n\n    logout(): Promise<void> {\n\n        let headers = new HttpHeaders( {\n            'Content-Type': 'application/json'\n        } );\n\n        this.service.start();\n\n\n        return this.http\n            .post<void>( acp + '/session/logout', { headers: headers } )\n            .finally(() => {\n                this.service.complete();\n            } )\n            .toPromise()\n            .then(( response: any ) => {\n                this.authService.setUser( null );\n\n                return response;\n            } )\n    }\n}\n","<div *ngIf=\"showIndicator\" class=\"standby-overlay\">\n\n</div>","import { Component, OnInit } from '@angular/core';\n\nimport { EventService, IEventListener } from '../../service/event.service';\n\n@Component({\n  \n  selector: 'loading-bar',\n  templateUrl: './loading-bar.component.html',\n  styleUrls: ['./loading-bar.css']\n})\nexport class LoadingBarComponent implements OnInit, IEventListener {\n  showIndicator: boolean = false;\n\n  constructor(private service: EventService) { }\n\n  ngOnInit(): void {\n    this.service.registerListener(this);\n  }\n  \n  ngOnDestroy(): void {\n    this.service.deregisterListener(this);\n  }\n  \n  start(): void {\n    this.showIndicator = true;    \n  }\n  \n  complete(): void {\n    this.showIndicator = false;    \n  }    \n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { LocalizationService } from '../service/localization.service';\n\n@Pipe({name: 'localize'})\nexport class LocalizePipe implements PipeTransform {\n  constructor(private service: LocalizationService) { }\n\t\n  transform(value: string): string {\n    return this.service.decode(value);\n  }\n}\n\n","import { Component, OnInit } from '@angular/core';\n\nimport { EventService, IEventListener } from '../../service/event.service';\n\n@Component({\n  \n  selector: 'message',\n  templateUrl: './message.component.html',\n  styles: [\n    '.error-container { text-align: center; border-width: 1px; border-color: #8c0000; border-style: solid; color: #8c0000; font-size: 17px; background: white;}',\n    '.message-container { text-align: center; border-width: 1px; border-color: #106828; border-style: solid; margin-left: 10%; margin-right: 10%; color: #106828; }'\n  ]\n})\nexport class MessageComponent implements OnInit, IEventListener {\n\t\n  error: any = null;\n  \n  message: string = \"\";\n\n  constructor(private service: EventService) { }\n\n  ngOnInit(): void {\n    this.service.registerListener(this);\n  }\n  \n  ngOnDestroy(): void {\n    this.service.deregisterListener(this);\n  }\n  \n  start(): void {\n    this.error = null;\n  }\n  \n  complete(): void {\n  }  \n  \n  onError(error: any): void {\n    this.error = error;\n  }\n  \n  onMessage(msg: string): void {\n    this.message = msg;\n  }\n}\n","import { Injectable } from '@angular/core';\n// import { Subject } from 'rxjs'\nimport { Subject } from 'rxjs/Subject';\n\n\nimport { Step, StepConfig } from '../model/modal';\n\n\ndeclare var acp: string;\n\n@Injectable()\nexport class ModalStepIndicatorService {\n\n    stepConfig: StepConfig;\n    step: Step;\n    private modalStepChangedSource = new Subject<StepConfig>();\n    modalStepChange = this.modalStepChangedSource.asObservable();\n\n\n    constructor(  ) { }\n\n    public getStepConfig(): StepConfig {\n        return this.stepConfig;\n    }\n\n    public setStepConfig(config: StepConfig): void {\n        this.stepConfig = config;\n        \n        this.modalStepChangedSource.next(this.stepConfig);\n    }\n\n    getStep(): Step {\n        return this.step;\n    }\n\n    setStep(step: Step): void {\n        this.step = step;\n    }\n}\n","\n<div>\n  <div *ngIf=\"message\" class=\"message-container\">\n    <div class=\"label-holder\">\n      <strong><localize key='dashboard.messagesLabel'></localize></strong>\n    </div>\n    <div class=\"holder\">\n      <div>\n        <p class=\"message\">{{message}}</p>\n      </div>\n    </div>\n  </div>\n  <div *ngIf=\"error\" class=\"error-container\">\n    <div class=\"label-holder\">\n      <strong><localize key='dashboard.errorsLabel'></localize></strong>\n    </div>\n    <div class=\"holder\">\n      <div>\n        <p class=\"error-message\" *ngIf=\"error.localizedMessage\">{{error.localizedMessage}}</p>\n        <p class=\"error-message\" *ngIf=\"!error.localizedMessage\"><localize key='error.generic'></localize></p>\n      </div>\n    </div>\n  </div>\n</div>\n","import { Injectable } from '@angular/core';\nimport { LocalizedValue } from '../model/core';\n\ndeclare var Globalize: any;\ndeclare var com: any\n\n@Injectable()\nexport class LocalizationService {\n\n    locales: string[] = ['defaultLocale'];\n\n    private parser: any = Globalize.numberParser();\n    private formatter: any = Globalize.numberFormatter();\n\n    getLocales(): string[] {\n        return this.locales;\n    }\n\n    setLocales( locales: string[] ): void {\n        this.locales = locales;\n    }\n\n    create(): LocalizedValue {\n        const value = { localizedValue: '', localeValues: [] } as LocalizedValue;\n\n        this.locales.forEach( locale => {\n            value.localeValues.push( { locale: locale, value: '' } );\n        } );\n\n        return value;\n    }\n\n    public parseNumber( value: string ): number {\n        if ( value != null && value.length > 0 ) {\n            //convert data from view format to model format\n            var number = this.parser( value );\n\n            return number;\n        }\n\n        return null;\n    }\n\n    public formatNumber( value: any ): string {\n        if ( value != null ) {\n            var number = value;\n\n            if ( typeof number === 'string' ) {\n                if ( number.length > 0 && Number( number ) ) {\n                    number = Number( value );\n                }\n                else {\n                    return \"\";\n                }\n            }\n\n            //convert data from model format to view format\n            return this.formatter( number );\n        }\n\n        return null;\n    }\n\n    public localize( bundle: string, key: string ): string {\n        return com.runwaysdk.Localize.localize( bundle, key );\n    }\n\n    public get( key: string ): string {\n        return com.runwaysdk.Localize.get( key );\n    }\n\n    public decode( key: string ): string {\n        let index = key.lastIndexOf( '.' );\n\n        if ( index !== -1 ) {\n\n            let temp = [key.slice( 0, index ), key.slice( index + 1 )]\n\n            return this.localize( temp[0], temp[1] );\n        }\n        else {\n            return this.get( key );\n        }\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router} from '@angular/router';\nimport { AuthService} from './auth.service';\n\n@Injectable()\nexport class AdminGuard implements CanActivate {\n\n  constructor(private service:AuthService, private router: Router) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n    \n    if (this.service.isAdmin()) {\n      return true; \n    }\n    \n    this.router.navigate([ '/export' ]);\n    \n    return false;\n  }\n}\n\n@Injectable()\nexport class MaintainerGuard implements CanActivate {\n\n  constructor(private service:AuthService, private router: Router) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n    \n    if (this.service.isAdmin() || this.service.isMaintainer()) {\n      return true; \n    }\n    \n    this.router.navigate([ '/export' ]);\n    \n    return false;\n  }\n}\n\n@Injectable()\nexport class ContributerGuard implements CanActivate {\n\n  constructor(private service:AuthService, private router: Router) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n    \n    if (this.service.isAdmin() || this.service.isMaintainer()  || this.service.isContributer()) {\n      return true; \n    }\n    \n    this.router.navigate([ '/export' ]);\n    \n    return false;\n  }\n}\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n\n  constructor(private service:AuthService, private router: Router) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n    \n    if (this.service.isLoggedIn()) {\n      return true; \n    }\n    \n    this.router.navigate([ '/login' ]);\n    \n    return false;\n  }\n}\n\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { HttpErrorResponse } from '@angular/common/http';\n\ndeclare var acp;\n\nexport interface IEventListener {\n    start(): void;\n    complete(): void;\n}\n\n@Injectable()\nexport class EventService {\n    private listeners: IEventListener[] = [];\n\n    public registerListener( listener: IEventListener ): void {\n        this.listeners.push( listener );\n    }\n\n    public deregisterListener( listener: IEventListener ): boolean {\n        let indexOfItem = this.listeners.indexOf( listener );\n\n        if ( indexOfItem === -1 ) {\n            return false;\n        }\n\n        this.listeners.splice( indexOfItem, 1 );\n\n        return true;\n    }\n\n    public start(): void {\n        for ( const listener of this.listeners ) {\n            listener.start();\n        }\n    }\n\n    public complete(): void {\n        for ( const listener of this.listeners ) {\n            listener.complete();\n        }\n    }\n}\n","import { Component, Input } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { LocalizationService } from '../../service/localization.service';\n\n@Component( {\n    selector: 'error-modal',\n    templateUrl: './error-modal.component.html',\n    styleUrls: ['./error-modal.css']\n} )\nexport class ErrorModalComponent {\n    /*\n     * Message\n     */\n    @Input() message: string =  this.localizeService.decode(\"error.modal.default.message\");\n\n    constructor( public bsModalRef: BsModalRef, private localizeService: LocalizationService ) { }\n}\n","import { Component, Input } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { BsModalService } from 'ngx-bootstrap/modal';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\n\nimport { ProfileComponent } from '../profile/profile.component';\n\nimport { AuthService } from '../../service/auth.service';\nimport { SessionService } from '../../service/session.service';\nimport { ProfileService } from '../../service/profile.service';\n\ndeclare var acp: string;\n\n@Component( {\n\n    selector: 'cgr-header',\n    templateUrl: './header.component.html',\n    styleUrls: []\n} )\nexport class CgrHeaderComponent {\n    context: string;\n    isAdmin: boolean;\n    isMaintainer: boolean;\n    isContributor: boolean;\n    bsModalRef: BsModalRef;\n\n    constructor(\n        private sessionService: SessionService,\n        private modalService: BsModalService,\n        private profileService: ProfileService,\n        private router: Router,\n        private service: AuthService\n    ) {\n        this.context = acp;\n        this.isAdmin = service.isAdmin();\n        this.isMaintainer = this.isAdmin || service.isMaintainer();\n        this.isContributor = this.isAdmin || this.isMaintainer || service.isContributer();\n    }\n\n    logout(): void {\n        \n        window.location.href = acp + '/session/logout';\n        \n//        this.sessionService.logout().then( response => {\n//            this.router.navigate( ['/login'] );\n//        } );\n    }\n\n    getUsername() {\n        return this.service.getUsername();\n    }\n\n    account(): void {\n        this.profileService.get().then( profile => {\n            this.bsModalRef = this.modalService.show( ProfileComponent, { backdrop: 'static', class: 'gray modal-lg' } );\n            this.bsModalRef.content.profile = profile;\n        } );\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpResponse } from '@angular/common/http';\n\nimport { Progress } from '../model/progress';\n\nexport interface IProgressListener {\n  start(): void;\n  progress(progress:Progress):void;  \n  complete(): void;\n}\n\n@Injectable()\nexport class ProgressService {\n  private listeners: IProgressListener[] = [];\n  \n  public constructor() {}\n  \n  public registerListener(listener: IProgressListener): void {\n   this.listeners.push(listener);\n  }\n  \n  public deregisterListener(listener: IProgressListener): boolean {\n    let indexOfItem = this.listeners.indexOf(listener);\n\n    if (indexOfItem === -1) {\n      return false;\n    }\n\n    this.listeners.splice(indexOfItem, 1);\n\n    return true;\n  }\n  \n  public start(): void {\n    for (const listener of this.listeners) {\n      listener.start();\n    }\n  }\n  \n  public progress(progress:Progress):void {\n    for (const listener of this.listeners) {\n      listener.progress(progress);\n    }\t  \n  }  \n  \n  public complete(): void {\n    for (const listener of this.listeners) {\n      listener.complete();\n    }\n  }  \n}","import {Component, Input, Output, EventEmitter} from '@angular/core';\n\ndeclare var acp:string;\n\n@Component({    \n  selector: 'boolean-field',\n  templateUrl: './boolean-field.component.html',\n  styles: ['./boolean-field.css']\n})\nexport class BooleanFieldComponent {\n\n  @Input() value:boolean = false;  \n  @Input() localizeLabelKey:string = \"\"; // localization key used to localize in the component template\n  @Input() label:string = \"\"; // raw string input\n  \n  @Output() public valueChange = new EventEmitter<boolean>();\n\n  constructor(){}\n  \n  toggle():void {\n    this.value = !this.value;\n    \n    this.valueChange.emit(this.value);\n  }\n}","///\n/// Copyright (c) 2015 TerraFrame, Inc. All rights reserved.\n///\n/// This file is part of Runway SDK(tm).\n///\n/// Runway SDK(tm) is free software: you can redistribute it and/or modify\n/// it under the terms of the GNU Lesser General Public License as\n/// published by the Free Software Foundation, either version 3 of the\n/// License, or (at your option) any later version.\n///\n/// Runway SDK(tm) is distributed in the hope that it will be useful, but\n/// WITHOUT ANY WARRANTY; without even the implied warranty of\n/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n/// GNU Lesser General Public License for more details.\n///\n/// You should have received a copy of the GNU Lesser General Public\n/// License along with Runway SDK(tm).  If not, see <http://www.gnu.org/licenses/>.\n///\n\nimport { Component} from '@angular/core';\n\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\n\nimport { Profile } from '../../model/profile';\nimport { ProfileService } from '../../service/profile.service';\nimport { AuthService } from '../../service/auth.service';\n\n\n@Component({  \n  selector: 'profile',\n  templateUrl: './profile.component.html',\n  styles: ['.modal-form .check-block .chk-area { margin: 10px 0px 0 0;}']\n})\nexport class ProfileComponent {\n  public profile:Profile = {\n    oid: '',\n    username: '',\n    password: '',\n    firstName: '',\n    lastName: '',\n    email: '',\n    changePassword:false    \n  };\n  \n  constructor(private service:ProfileService, public bsModalRef: BsModalRef, private authService: AuthService) {}\n  \n  onSubmit():void {\n    if(!this.profile.changePassword) {\n      delete this.profile.password;\n    }\n\t  \n    this.service.apply(this.profile).then(profile => {\n      this.bsModalRef.hide();\n    });\n  }\n  \n  getRoles():string {\n    return this.authService.getRoleDisplayLabels();\n  }\n  \n  cancel():void {\n    this.service.unlock(this.profile.oid).then(profile => {\n      this.bsModalRef.hide();\n    });\n  }  \n}\n","import { CanDeactivate } from '@angular/router';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\n\n// Thanks to : https://stackoverflow.com/a/41187919/219843\n\nexport interface ComponentCanDeactivate {\n  canDeactivate: () => boolean | Observable<boolean>;\n  afterDeactivate: (boolean) => void;\n}\n\n@Injectable()\nexport class PendingChangesGuard implements CanDeactivate<ComponentCanDeactivate> {\n  canDeactivate(component: ComponentCanDeactivate): boolean | Observable<boolean> {\n    if (!component.canDeactivate())\n    {\n      // NOTE: this warning message will only be shown when navigating elsewhere within your angular app;\n      // when navigating away from your angular app, the browser will show a generic warning message\n      // see http://stackoverflow.com/a/42207299/7307355\n      var confirmRet = confirm('WARNING: You have unsaved changes. Press Cancel to go back and save these changes, or OK to lose these changes.');\n      \n      component.afterDeactivate(confirmRet);\n      \n      return confirmRet;\n    }\n    \n    return true;\n  }\n}","<!-- HEADER AND NAVBAR -->\n<header>\n  <nav class=\"navbar navbar-default\">\n    <div class=\"container-fluid\">\n      <div class=\"navbar-header\">\n        <a class=\"navbar-brand\" href=\"{{context}}/cgr/manage#/menu\"><img [src]=\"context + '/logo/view?id=logo'\" /></a>\n        <a class=\"navbar-brand\" href=\"{{context}}/cgr/manage#/menu\"><localize key=\"cgr.standard.title\"></localize></a>\n      </div>\n          \n       <ul class=\"nav navbar-nav navbar-right\"> \n\t\t <li>\n\t\t\t<a (click)=\"account()\" class=\"navbar-username\">\n\t\t\t<!-- <div>Logged in as</div> -->\n\t\t\t\t<div>{{getUsername()}}</div>\n\t\t\t</a>\n\t\t </li>\n         <li dropdown> \n             <!-- <localize key=\"hierarchy-management.menu\"></localize> -->\n           <a class=\"dropdown-toggle\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\" dropdownToggle> \n             <span class=\"glyphicon glyphicon-menu-hamburger\"></span> \n           </a>     \n\n           \n              <ul *dropdownMenu class=\"dropdown-menu\">\n                <!-- GeoRegistry specific links -->\n                <li *ngIf=\"isMaintainer\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/registry/hierarchies\" routerLinkActive=\"active\"><localize key=\"hierarchies.menu\"></localize></a></li> \n                <li *ngIf=\"isContributor\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/registry/master-lists\" routerLinkActive=\"active\"><localize key=\"masterlist.menu\"></localize> </a></li>\n                <li *ngIf=\"isMaintainer\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/registry/data\" routerLinkActive=\"active\"><localize key=\"header.data.option\"></localize> </a></li>\n                <li role=\"menuitem\"><a class=\"dropdown-item\" href=\"{{context}}/nav/management#/locations\"><localize key=navigator.menu></localize> </a></li>\n                <li *ngIf=\"isContributor\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/registry/change-requests\" routerLinkActive=\"active\"><localize key=\"header.changerequest.option\"></localize> </a></li>\n                \n                <hr *ngIf=\"isAdmin\">\n                <li *ngIf=\"isAdmin\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/registry/localization-manager\" routerLinkActive=\"active\"><localize key=\"localization-manager.menu\"></localize></a></li>\n                <li *ngIf=\"isAdmin\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/admin/logos\" routerLinkActive=\"active\"><i></i><localize key=\"Icons\"></localize></a></li>\n                <li *ngIf=\"isAdmin\" role=\"menuitem\">\n                    <a class=\"user-command-link\" routerLink=\"/admin/accounts\"><localize key=\"accounts.link\"></localize></a>\n                </li>\n                <li *ngIf=\"isAdmin\" role=\"menuitem\"><a class=\"dropdown-item\" routerLink=\"/admin/email\" routerLinkActive=\"active\"><i></i><localize key=\"email.link\"></localize></a></li>\n  \n                <hr>\n                <li role=\"menuitem\"><a class=\"user-command-link\" (click)=\"logout()\"><localize key=\"userDashboards.logout\"></localize></a></li>\n            \n              </ul>\n         </li> \n       </ul> \n    </div>\n  </nav>\n</header>\n","<div *ngIf=\"message != null\" class=\"error-container\">\n    <div class=\"\">\n        <strong class=\"error-title\">\n            <localize key=\"error.title\"></localize>\n        </strong>\n    </div>\n    <div class=\"\">\n        <div>\n            <p class=\"error-message\">{{message}}</p>\n        </div>\n    </div>\n</div>","import { Component, Input } from '@angular/core';\nimport { LocalizationService } from '../../service/localization.service';\n\n@Component( {\n    selector: 'error-message',\n    templateUrl: './error-message.component.html',\n    styleUrls: ['./error-message.css']\n} )\nexport class ErrorMessageComponent {\n    /*\n     * Message\n     */\n    @Input() message: string =  this.localizeService.decode(\"error.modal.default.message\");\n\n    constructor( private localizeService: LocalizationService ) { }\n}\n","import { Component, Input } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { Subject } from 'rxjs/Subject';\nimport { LocalizationService } from '../../service/localization.service';\nimport { ModalTypes } from '../../model/modal';\n\n\n@Component( {\n    selector: 'confirm-modal',\n    templateUrl: './confirm-modal.component.html',\n    styleUrls: ['./modal.css']\n} )\nexport class ConfirmModalComponent {\n    /*\n     * Message\n     */\n    @Input() message: string = this.localizeService.decode(\"confirm.modal.default.message\");\n\n    @Input() data: any;\n\n    @Input() submitText: string = this.localizeService.decode(\"modal.button.submit\");\n\n    @Input() cancelText: string = this.localizeService.decode(\"modal.button.cancel\");\n\n    @Input() type: ModalTypes = ModalTypes.warning;\n\n    /*\n     * Called on confirm\n     */\n    public onConfirm: Subject<any>;\n\n    constructor( public bsModalRef: BsModalRef, private localizeService: LocalizationService ) { }\n\n    ngOnInit(): void {\n        this.onConfirm = new Subject();\n    }\n\n    confirm(): void {\n        this.bsModalRef.hide();\n        this.onConfirm.next( this.data );\n    }\n}\n","export enum ModalTypes {\n    \"warning\" = \"WARNING\",\n    \"danger\" = \"DANGER\"\n}\n\nexport class StepConfig {\n    steps: Step[];\n}\n\nexport class Step {\n    label: string;\n    active: boolean;\n    enabled: boolean;\n}","import { Component, Input } from '@angular/core';\nimport { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';\nimport { LocalizationService } from '../../service/localization.service';\n\n@Component( {\n    selector: 'success-modal',\n    templateUrl: './success-modal.component.html',\n    styleUrls: ['./success-modal.css']\n} )\nexport class SuccessModalComponent {\n    /*\n     * Message\n     */\n    @Input() message: string = this.message ? this.message : this.localizeService.decode(\"success.modal.default.message\");\n\n    constructor( public bsModalRef: BsModalRef, private localizeService: LocalizationService ) { }\n}\n","<div class=\"step-indicator\" >\n    <ul *ngIf=\"stepConfig && stepConfig.steps.length > 0\" class=\"list-inline nav nav-justified\">\n        <li class=\"nav-item\" [ngClass]=\"{'active':step.active, 'enabled':step.enabled}\" *ngFor=\"let step of stepConfig.steps\">{{step.label}}</li>\n    </ul>\n</div>","<div class=\"modal-body text-center\">\n    <h3>{{message}}</h3>\n\n    <div class=\"modal-footer\">\n    \t<div class=\"button-holder\">\n  \t\t\t<button type=\"button\" class=\"btn btn-default\" (click)=\"bsModalRef.hide()\" ><localize key=\"modal.button.close\"></localize></button>\n  \t\t</div>\n  \t</div>\n</div>\n","<div class=\"modal-body text-center\">\n    <h3>{{message}}</h3>\n\n    <div class=\"modal-footer\">\n    \t<div class=\"button-holder\">\n  \t\t\t<button type=\"button\" class=\"btn btn-default\" (click)=\"bsModalRef.hide()\" ><localize key=\"modal.button.close\"></localize></button>\n\t\t</div>\n\t</div>\n\t  \n</div>\n","<div class=\"confirm-modal modal-body text-center\">\n  \n    <h3>{{message}}</h3>\n    \n   <div class=\"modal-footer\">\n    \t<div class=\"button-holder\">\n      <button type=\"button\" (click)=\"bsModalRef.hide()\" class=\"btn btn-default\" role=\"button\" aria-disabled=\"false\" style=\"padding: 4px 18px;\">\n        <span class=\"ui-button-text\">{{cancelText}}</span>\n      </button>\n      <button type=\"button\" (click)=\"confirm()\" [ngClass]=\"type === 'DANGER' ? 'btn-danger' : 'btn-primary'\" class=\"btn\" role=\"button\" aria-disabled=\"false\" style=\"padding: 4px 18px;\">\n        <span class=\"ui-button-text\">{{submitText}}</span>\n      </button>\n    </div>\n  </div>\n</div>  ","import { Component } from '@angular/core';\nimport { LocalizationService } from '../../service/localization.service';\nimport { ModalStepIndicatorService} from '../../service/modal-step-indicator.service'\n\nimport { Step, StepConfig } from '../../model/modal';\nimport { Subscription } from 'rxjs';\n\n\n@Component( { \n    selector: 'modal-step-indicator',\n    templateUrl: './modal-step-indicator.component.html',\n    styleUrls: ['./modal-step-indicator.css']\n} )\nexport class ModalStepIndicatorComponent {\n\n    stepConfig: StepConfig;\n    step: Step;\n    stepSubscription: Subscription;\n\n    constructor( private localizeService: LocalizationService, private modalStepIndicatorService: ModalStepIndicatorService ) { \n        this.stepSubscription = modalStepIndicatorService.modalStepChange.subscribe( stepConfig => {\n            this.stepConfig = stepConfig;\n        })\n\n    }\n\n    ngOnInit(): void {\n    }\n\n    ngOnDestroy() {\n        this.stepSubscription.unsubscribe();\n    }\n}\n","<div>\n  <message ></message>  \n\n  <form #form=\"ngForm\" class=\"modal-form\" style=\"background: none;border: none;\" (ngSubmit)=\"form.valid && onSubmit()\">    \n    <!-- <div class=\"modal-dialog\" style=\"background: none;border: none;\"> -->\n      <!-- <div class=\"modal-content\" style=\"background: none;border: none;\"> -->\n        <fieldset>            \n          <div class=\"heading\">\n            <h3><localize key=\"profile.heading\"></localize></h3>\n          </div>      \n          <hr>        \n          <div class=\"row-holder\">\n            <div class=\"label-holder\">\n              <label><localize key=\"account.firstname\"></localize></label>\n            </div>          \n            <div class=\"holder\" >\n              <span class=\"text\">\n                <input type=\"text\" [(ngModel)]=\"profile.firstName\" name=\"firstname\" required>\n              </span>\n            </div>\n          </div>          \n          <div class=\"row-holder\">\n            <div class=\"label-holder\">\n              <label><localize key=\"account.lastname\"></localize></label>\n            </div>          \n            <div class=\"holder\" >\n              <span class=\"text\">\n                <input type=\"text\" [(ngModel)]=\"profile.lastName\" name=\"lastname\" required>\n              </span>\n            </div>\n          </div>          \n          <div class=\"row-holder\">\n            <div class=\"label-holder\">\n              <label><localize key=\"account.email\"></localize></label>\n            </div>          \n            <div class=\"holder\" >\n              <span class=\"text\">\n                <input type=\"text\" [(ngModel)]=\"profile.email\" name=\"email\" required #aemail=\"ngModel\" email>\n              </span>\n              <div *ngIf=\"aemail.errors?.email\" class=\"inline-error-message\">\n                <localize key=\"account.email.validation\"></localize>\n              </div>                                          \n            </div>\n          </div>          \n          <div class=\"heading\">\n            <h3><localize key=\"account.info.heading\"></localize></h3>\n          </div>      \n          <hr>          \n          <div class=\"row-holder\">\n            <div class=\"label-holder\">\n              <label><localize key=\"profilename\"></localize></label>\n            </div>          \n            <div class=\"holder\" >\n              <span class=\"text\">\n                <input type=\"text\" [(ngModel)]=\"profile.username\" name=\"username\" required>\n              </span>\n            </div>\n          </div>\n          <div class=\"row-holder\">\n            <div class=\"label-holder\">\n              <label><localize key=\"account.changePassword\"></localize></label>\n            </div>          \n            <div class=\"holder\" >\n              <boolean-field [(value)]=\"profile.changePassword\"></boolean-field>\n            </div>\n          </div>                        \n          <div *ngIf=\"profile.changePassword\">\n            <div class=\"row-holder\">\n              <div class=\"label-holder\">\n                <label><localize key=\"account.password\"></localize></label>\n              </div>          \n              <div class=\"holder\" >\n                <span class=\"text\">\n                  <input type=\"password\" [(ngModel)]=\"profile.password\" name=\"password\" #password=\"ngModel\" required minlength=\"5\" maxlength=\"50\" >\n                  <ng2-password-strength-bar\n                    [passwordToCheck]=\"profile.password\">\n                  </ng2-password-strength-bar>                              \n                </span>\n              </div>\n            </div>  \n            <div class=\"row-holder\">\n              <div class=\"label-holder\">\n                <label><localize key=\"account.certainPassword\"></localize></label>\n              </div>          \n              <div class=\"holder\" >\n                <span class=\"text\">\n                  <input type=\"password\" ngModel name=\"certainPassword\" #certainPassword=\"ngModel\" [equalTo]=\"password\"/>\n                </span>\n                <div *ngIf=\"certainPassword.errors?.equalTo\" class=\"inline-error-message\">\n                  <localize key=\"account.certainPassword.validation\"></localize>\n                </div>                                                       \n              </div>\n            </div>  \n          </div>\n          <div class=\"row-holder\">\n            <div class=\"label-holder\">\n              <label><localize key=\"com.runwaysdk.ui.userstable.UsersTable.adminRoles\"></localize></label>\n            </div>                    \n            <div class=\"holder\">\n              <label style=\"margin-top:10px;\">{{getRoles()}}</label>\n            </div>\n          </div>\n          <div class=\"row-holder\">\n            <div class=\"label-holder\">\n            </div>                    \n            <div class=\"holder\">\n              <div class=\"button-holder\">\n                <input type=\"button\" [value]=\"'dataset.cancel' | localize\" class=\"btn btn-default\" (click)=\"cancel()\" />              \n                <input type=\"submit\" [value]=\"'dataset.submit' | localize\" class=\"btn btn-primary\" [disabled]=\"!(form.valid)\" />\n              </div>\n            </div>\n          </div>\n        </fieldset>\n      <!-- </div> -->\n    <!-- </div> -->\n  </form>\n</div>\n","<div class=\"check-block\">\n  <div (click)=\"toggle()\" [ngClass]=\"{'chk-checked' : value}\" ng-style=\"chkstyle\" class=\"jcf-unselectable chk-area\">\n    <span></span>\n  </div>\n  \n  <label *ngIf=\"label.length > 0\" class=\"checkbox-label\">{{label}}</label>\n  <label *ngIf=\"localizeLabelKey.length > 0\" class=\"checkbox-label\"><localize key=\"{{localizeLabelKey}}\"></localize></label>\n</div>","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { TreeModule } from 'angular-tree-component';\nimport { ContextMenuModule } from 'ngx-contextmenu';\nimport { ModalModule } from 'ngx-bootstrap/modal';\nimport { BsDropdownModule } from 'ngx-bootstrap/dropdown';\nimport { ButtonsModule } from 'ngx-bootstrap/buttons';\nimport { TypeaheadModule } from 'ngx-bootstrap/typeahead';\nimport { CookieService } from 'ngx-cookie-service';\nimport { FileUploadModule } from 'ng2-file-upload/ng2-file-upload';\nimport { NgxPaginationModule } from 'ngx-pagination';\nimport { ProgressbarModule } from 'ngx-bootstrap/progressbar';\nimport { CollapseModule } from 'ngx-bootstrap/collapse';\nimport { PasswordStrengthBarModule } from 'ng2-password-strength-bar';\nimport { CustomFormsModule } from 'ng2-validation'\n\nimport { ErrorModalComponent } from './component/modals/error-modal.component';\nimport { SuccessModalComponent } from './component/modals/success-modal.component';\nimport { ConfirmModalComponent } from './component/modals/confirm-modal.component';\nimport { ErrorMessageComponent } from './component/message/error-message.component';\nimport { MessageComponent } from './component/message/message.component';\nimport { ValidationComponent } from './component/form-fields/base/validation.component';\nimport { BooleanFieldComponent } from './component/form-fields/boolean-field/boolean-field.component';\nimport { LoadingBarComponent } from './component/loading-bar/loading-bar.component';\n\nimport { AdminGuard, MaintainerGuard, ContributerGuard, AuthGuard } from './service/guard.service';\nimport { PendingChangesGuard } from './service/pending-changes-guard';\n\nimport { AuthService } from './service/auth.service';\nimport { ProfileService } from './service/profile.service';\nimport { LocalizationService } from './service/localization.service';\nimport { ProgressService } from './service/progress.service';\nimport { EventService } from './service/event.service';\nimport { ModalStepIndicatorService } from './service/modal-step-indicator.service';\nimport { SessionService } from './service/session.service';\n\nimport { LocalizePipe } from './pipe/localize.pipe';\nimport { PhonePipe } from './pipe/phone.pipe';\n\nimport { OnlyNumber } from './directive/number-only.directive';\n\nimport { CgrHeaderComponent } from './component/header/header.component';\nimport { ProgressBarComponent } from './component/progress-bar/progress-bar.component';\nimport { LocalizeComponent } from './component/localize/localize.component';\nimport { ModalStepIndicatorComponent } from './component/modals/modal-step-indicator.component';\nimport { ProfileComponent } from './component/profile/profile.component';\n\nimport '../rxjs-extensions';\n\n@NgModule( {\n    imports: [\n        CommonModule,\n        RouterModule,\n        FormsModule,\n        ReactiveFormsModule,\n        FileUploadModule,\n        ModalModule.forRoot(),\n        TreeModule,\n        ContextMenuModule,\n        BsDropdownModule,\n        ButtonsModule,\n        TypeaheadModule,\n        ProgressbarModule,\n        CollapseModule,\n        NgxPaginationModule,\n        PasswordStrengthBarModule,\n        CustomFormsModule\n    ],\n    declarations: [\n        LocalizeComponent,\n        BooleanFieldComponent,\n        LoadingBarComponent,\n        ErrorMessageComponent,\n        MessageComponent,\n        ConfirmModalComponent,\n        ErrorModalComponent,\n        SuccessModalComponent,\n        OnlyNumber,\n        ValidationComponent,\n        ProgressBarComponent,\n        ModalStepIndicatorComponent,\n        CgrHeaderComponent,\n        ProfileComponent,\n        LocalizePipe,\n        PhonePipe\n    ],\n    exports: [\n        LocalizeComponent,\n        BooleanFieldComponent,\n        LoadingBarComponent,\n        ErrorMessageComponent,\n        MessageComponent,\n        ConfirmModalComponent,\n        ErrorModalComponent,\n        SuccessModalComponent,\n        OnlyNumber,\n        ValidationComponent,\n        ProgressBarComponent,\n        ModalStepIndicatorComponent,\n        CgrHeaderComponent,\n        ProfileComponent,\n        LocalizePipe,\n        PhonePipe,\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule\n    ],\n    entryComponents: [\n        ErrorModalComponent,\n        SuccessModalComponent,\n        ConfirmModalComponent,\n        ModalStepIndicatorComponent,\n        ErrorMessageComponent,\n        LoadingBarComponent,\n        ProfileComponent\n    ]\n} )\nexport class SharedModule {\n    static forRoot(): ModuleWithProviders {\n        return {\n            ngModule: SharedModule,\n            providers: [\n                CookieService,\n                AuthService,\n                SessionService,\n                ProfileService,\n                LocalizationService,\n                ModalStepIndicatorService,\n                EventService,\n                ProgressService,\n                AdminGuard,\n                MaintainerGuard,\n                ContributerGuard,\n                AuthGuard,\n                PendingChangesGuard\n            ]\n        };\n    }\n}\n","import { Input, Component, OnInit } from '@angular/core';\n\nimport { LocalizationService } from '../../service/localization.service';\n\n@Component({\n  \n  selector: 'localize',\n  templateUrl: './localize.component.html',\n  styleUrls: []\n})\nexport class LocalizeComponent implements OnInit {\n  @Input() key: string;\n  text: string;\n    \n  constructor(private service: LocalizationService) { }\n\n  ngOnInit(): void {\n    this.text = this.service.decode(this.key);\n  }\n}\n","{{text}}","import { Injectable } from '@angular/core';\nimport { CookieService } from 'ngx-cookie-service';\nimport { User } from '../model/user';\n\n@Injectable()\nexport class AuthService {\n  private user:User = {\n    loggedIn:false,\n    userName:'',\n    roles:[],\n    roleDisplayLabels:[],\n    version:\"0\"\n  };\n\n    constructor( private service: CookieService ) {\n        let cookie = service.get( 'user' );\n\n        if ( this.service.check( \"user\" ) && cookie != null && cookie.length > 0 ) {\n            let cookieData: string = this.service.get( \"user\" )\n            let cookieDataJSON: any = JSON.parse( JSON.parse( cookieData ) );\n            \n            this.user.userName = cookieDataJSON.userName;\n            this.user.roles = cookieDataJSON.roles;\n            this.user.loggedIn = cookieDataJSON.loggedIn;\n            this.user.roleDisplayLabels = cookieDataJSON.roleDisplayLabels;\n            this.user.version = cookieDataJSON.version;\n        }\n    }\n    \n    isLoggedIn():boolean {\n      return this.user.loggedIn;\n    }\n    \n    setUser(user:User):void {\n      this.user = user;    \n    }\n\n    removeUser(): void {\n      this.user = {\n        loggedIn:false,\n        userName:'',\n        roles:[],\n        roleDisplayLabels:[],\n        version:\"0\"\n      };\n    }\n\n    isAdmin(): boolean {\n        return this.user.roles.indexOf( \"geoprism.admin.Administrator\" ) !== -1 || this.user.roles.indexOf( \"commongeoregistry.RegistryAdministrator\" ) !== -1;\n    }\n\n    isMaintainer(): boolean {\n        return this.user.roles.indexOf( \"commongeoregistry.RegistryMaintainer\" ) !== -1;\n    }\n    \n    isContributer(): boolean {\n        return this.user.roles.indexOf( \"commongeoregistry.RegistryContributor\" ) !== -1;\n    }\n  \n  getUsername(): string {\n    return this.user.userName;\n  }\n  \n  getRoles(): string {\n    let str = \"\";\n    for (let i = 0; i < this.user.roles.length; ++i)\n    {\n      str = str + this.user.roles[i];\n      \n      if (i < this.user.roles.length-1)\n      {\n        str = str + \",\";\n      }\n    }\n  \n    return str;\n  }\n  \n  getRoleDisplayLabels(): string {\n    let str = \"\";\n    for (let i = 0; i < this.user.roles.length; ++i)\n    {\n      str = str + this.user.roleDisplayLabels[i];\n      \n      if (i < this.user.roleDisplayLabels.length-1)\n      {\n        str = str + \",\";\n      }\n    }\n  \n    return str;\n  }\n  \n  getVersion(): string {\n    return this.user.version;\n  }\n}\n"],"sourceRoot":""}