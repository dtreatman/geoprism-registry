package net.geoprism.registry.graph;

@com.runwaysdk.business.ClassSignature(hash = -1294654327)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to GeoVertex.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class GeoVertexBase extends com.runwaysdk.business.graph.VertexObject
{
  public final static String CLASS = "net.geoprism.registry.graph.GeoVertex";
  public static java.lang.String GEOID = "geoId";
  public static java.lang.String GEOLINE = "geoLine";
  public static java.lang.String GEOMULTILINE = "geoMultiLine";
  public static java.lang.String GEOMULTIPOINT = "geoMultiPoint";
  public static java.lang.String GEOMULTIPOLYGON = "geoMultiPolygon";
  public static java.lang.String GEOPOINT = "geoPoint";
  public static java.lang.String GEOPOLYGON = "geoPolygon";
  public static java.lang.String OID = "oid";
  public static java.lang.String SEQ = "seq";
  private static final long serialVersionUID = -1294654327;
  
  public GeoVertexBase()
  {
    super();
  }
  
  public String getGeoId()
  {
    return (String) this.getObjectValue(GEOID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF getGeoIdMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.graph.GeoVertex.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeCharacterDAOIF)mdClassIF.definesAttribute(GEOID);
  }
  
  public void setGeoId(String value)
  {
    this.setValue(GEOID, value);
  }
  
  public com.vividsolutions.jts.geom.LineString getGeoLine()
  {
    return (com.vividsolutions.jts.geom.LineString) this.getObjectValue(GEOLINE);
  }
  
  public static com.runwaysdk.gis.dataaccess.MdAttributeLineStringDAOIF getGeoLineMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.graph.GeoVertex.CLASS);
    return (com.runwaysdk.gis.dataaccess.MdAttributeLineStringDAOIF)mdClassIF.definesAttribute(GEOLINE);
  }
  
  public void setGeoLine(com.vividsolutions.jts.geom.LineString value)
  {
    this.setValue(GEOLINE, value);
  }
  
  public com.vividsolutions.jts.geom.MultiLineString getGeoMultiLine()
  {
    return (com.vividsolutions.jts.geom.MultiLineString) this.getObjectValue(GEOMULTILINE);
  }
  
  public static com.runwaysdk.gis.dataaccess.MdAttributeMultiLineStringDAOIF getGeoMultiLineMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.graph.GeoVertex.CLASS);
    return (com.runwaysdk.gis.dataaccess.MdAttributeMultiLineStringDAOIF)mdClassIF.definesAttribute(GEOMULTILINE);
  }
  
  public void setGeoMultiLine(com.vividsolutions.jts.geom.MultiLineString value)
  {
    this.setValue(GEOMULTILINE, value);
  }
  
  public com.vividsolutions.jts.geom.MultiPoint getGeoMultiPoint()
  {
    return (com.vividsolutions.jts.geom.MultiPoint) this.getObjectValue(GEOMULTIPOINT);
  }
  
  public static com.runwaysdk.gis.dataaccess.MdAttributeMultiPointDAOIF getGeoMultiPointMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.graph.GeoVertex.CLASS);
    return (com.runwaysdk.gis.dataaccess.MdAttributeMultiPointDAOIF)mdClassIF.definesAttribute(GEOMULTIPOINT);
  }
  
  public void setGeoMultiPoint(com.vividsolutions.jts.geom.MultiPoint value)
  {
    this.setValue(GEOMULTIPOINT, value);
  }
  
  public com.vividsolutions.jts.geom.MultiPolygon getGeoMultiPolygon()
  {
    return (com.vividsolutions.jts.geom.MultiPolygon) this.getObjectValue(GEOMULTIPOLYGON);
  }
  
  public static com.runwaysdk.gis.dataaccess.MdAttributeMultiPolygonDAOIF getGeoMultiPolygonMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.graph.GeoVertex.CLASS);
    return (com.runwaysdk.gis.dataaccess.MdAttributeMultiPolygonDAOIF)mdClassIF.definesAttribute(GEOMULTIPOLYGON);
  }
  
  public void setGeoMultiPolygon(com.vividsolutions.jts.geom.MultiPolygon value)
  {
    this.setValue(GEOMULTIPOLYGON, value);
  }
  
  public com.vividsolutions.jts.geom.Point getGeoPoint()
  {
    return (com.vividsolutions.jts.geom.Point) this.getObjectValue(GEOPOINT);
  }
  
  public static com.runwaysdk.gis.dataaccess.MdAttributePointDAOIF getGeoPointMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.graph.GeoVertex.CLASS);
    return (com.runwaysdk.gis.dataaccess.MdAttributePointDAOIF)mdClassIF.definesAttribute(GEOPOINT);
  }
  
  public void setGeoPoint(com.vividsolutions.jts.geom.Point value)
  {
    this.setValue(GEOPOINT, value);
  }
  
  public com.vividsolutions.jts.geom.Polygon getGeoPolygon()
  {
    return (com.vividsolutions.jts.geom.Polygon) this.getObjectValue(GEOPOLYGON);
  }
  
  public static com.runwaysdk.gis.dataaccess.MdAttributePolygonDAOIF getGeoPolygonMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.graph.GeoVertex.CLASS);
    return (com.runwaysdk.gis.dataaccess.MdAttributePolygonDAOIF)mdClassIF.definesAttribute(GEOPOLYGON);
  }
  
  public void setGeoPolygon(com.vividsolutions.jts.geom.Polygon value)
  {
    this.setValue(GEOPOLYGON, value);
  }
  
  public String getOid()
  {
    return (String) this.getObjectValue(OID);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeUUIDDAOIF getOidMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.graph.GeoVertex.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeUUIDDAOIF)mdClassIF.definesAttribute(OID);
  }
  
  public Long getSeq()
  {
    return (Long) this.getObjectValue(SEQ);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeLongDAOIF getSeqMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.graph.GeoVertex.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeLongDAOIF)mdClassIF.definesAttribute(SEQ);
  }
  
  public void setSeq(Long value)
  {
    this.setValue(SEQ, value);
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static GeoVertex get(String oid)
  {
    return (GeoVertex) com.runwaysdk.business.graph.VertexObject.get(CLASS, oid);
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
